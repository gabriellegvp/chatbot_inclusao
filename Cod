#walle
import json
import random
from textblob import TextBlob
import pyttsx3

class TextToSpeech:
    def __init__(self):
        self.engine = pyttsx3.init()
        self.engine.setProperty("rate", 150)

    def speak(self, text):
        self.engine.say(text)
        self.engine.runAndWait()

class SentimentAnalysis:
    @staticmethod
    def analyze_text(text):
        analysis = TextBlob(text)
        return analysis.sentiment.polarity
    
class CrisisSupport:
    def __init__(self):
        self.tts = TextToSpeech()
        self.sentiment = SentimentAnalysis()

    def detect_crisis(self):
        print("\n[Walle] Analisando situação da criança...")
        mood = input("Digite a descrição da situação: ")
        mood_score = self.sentiment.analyze_text(mood)

        if mood_score < -0.5:
            return True, "Alta probabilidade de crise dectada."
        elif mood_score < 0:
            return True, "Sinais leves de estresse detectada."
        else:
            return False, "Nenhuma crise detectada."
    
    def manage_crisis(self):
        in_crisis, message = self.detect_crisis()
        self.tts.speak(message)

        if in_crisis:
            action = self.suggest_action(message)
            self.tts.speak(action)
            print(f"\n[Walle] {action}")
        else:
            print("\n[Walle] Tudo parece bem no momento!")

class InteractiveLearning:
    def __init__(self):
        self.lessons = ["Cores", "Números", "Formas"]
        self.tts = TextToSpeech()
    
    def display_options(self):
        print("n\[Walle] Escolha uma lição:")
        for i, lesson in enumerate(self.lessons, 1):
           print(f"{i}. {lesson}")

    def start_session(self):
        self.display_options()
        choice = int(input("Digite o número da lição"))

        if 1 <= choice <= len(self.lessons):
            lesson = self.lessons[choice - 1]
            self.tts.speak(f"Iniciando lição sobre {lesson}.")
            self.simulate_lesson(lesson)
        else:
            print("\n[Walle] Opção inválida.")

    def simulate_lesson(self, lesson):
        questions = {
            "Cores": ["Qual é a cor do céu?", "Qual é a cor da grama?"],
            "Números": ["Quanto é 2 + 2?", "Quanto é 3 - 1?"],
            "Formas": ["Qual forma tem 3 lados?", "Qual forma é redonda?"],
         }

        print(f"\n[Walle] Lição: {lesson}")
        for question in questions.get(lesson,[]):
            print(question)
            self.tts.speak(question)
            input("Sua resposta: ")
            print("[Walle] Muito bem!")

class SocialIntegration:
    def __init__(self):
        self.tts = TextToSpeech()

    def initiate_integration(self):
        print("\n[Walle] Vamos trabalhar na integração social!")
        options = [
            "Sorrir e cumprimentarnamigos na escola.",
            "Participar de uma atividade em grupo, como brincar de bola.",
            "Compartilhar brinquedos e conversar sobre preferências.",
        ]
        for i, option in enumerate(options, 1):
            print(f"{i}. {option}")
        self.tts.speak("Escolha uma atividade para começar!")
        choice = int(input("Digite o número da atividade: "))

        if 1 <= choice <= len(options):
            activity = options[choice -1]
            self.tts.speak(f"Iniciando atividade:{activity}")
            print(f"\n[Walle] {activity}")
        else:
            print("\n[Walle] Opção inválida.")

class Walle:
    def __init__(self):
        self.learning = InteractiveLearning()
        self.integration = SocialIntegration()
        self.crisis_support = CrisisSupport()

    def start(self):
        print("\n[Walle] Olá! Como posso ajudar hoje?")
        print("1. Aprender algo novo.")
        print("2. Trabalhar na integração social.")
        print("3. Detectar e gerenciar crises.")
        choice = int(input("Digite o número da sua escolha:"))

        if choice == 1:
            self.learning.start_session()
        elif choice == 2:
            self.integration.initiate_integration()
        elif choice == 3:
            self.crisis_support.manage_crisis()
        else:
            print("\n[Walle] Opção inválida.")

# Inicialização do Walle
if __name__ == "__main__":
    walle = Walle()
    walle.start()
